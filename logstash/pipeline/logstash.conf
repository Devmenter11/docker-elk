input {
	beats {
		port => 5044
	}
}


filter {
  if [fields][document_type] == "project_apim" {
     grok {
        match => ["message", "%{GREEDYDATA:UNWANTED}\ apimMetrics:%{GREEDYDATA:apimMetrics}\, %{GREEDYDATA:UNWANTED} \:%{GREEDYDATA:properties}"]
    }
    json {
        source => "properties"
    }
  } else if [fields][document_type] == "project_is_1" {



	if " Event:" not in [message] {
	  drop {}
	}

	mutate {
        gsub => [
          "message", "LOCAL", "Resident"
        ]
	}

	# Date format parse.
	grok {
		ecs_compatibility => disabled
		match => {
			'message' => '\[%{TIMESTAMP_ISO8601:logtime}\].*Unique ID: %{GREEDYDATA:eventType},\n Event: %{GREEDYDATA:eventdata}'
		}
	}

	json {
		ecs_compatibility => disabled
		source => "eventdata"
		remove_field => ["eventdata","message"]
	}

	# Ruby code to convert the comma seperated roles into an array.
	ruby{
		code =>"

		# Method to split the supplied string by comma, trim whitespace and return an array.
		def mapStringToArray(strFieldValue)

		# If string is not null, return array.
		if (strFieldValue != nil)
			fieldArr =  strFieldValue.split(',').map(&:strip).reject(&:empty?).uniq 
			return fieldArr                             
		end

		# Return empty array if string is nil.
		return []
		end

		vrtArr = mapStringToArray(event.get('[event][payloadData][rolesCommaSeparated]'))
		if vrtArr.length > 0                           
			event.set('[event][payloadData][rolesCommaSeparated]', vrtArr)
		end

        event_array = []
		event_type = event.get('[event][payloadData][eventType]')
		idp_type = event.get('[event][payloadData][identityProviderType]')
		auth_step_success = event.get('[event][payloadData][authStepSuccess]')
		if (event_type == 'overall' || auth_step_success == false)
			event_array.push('Overall')
		end
		if (event_type == 'step')
			if (idp_type == 'Resident')
				event_array.push('Resident')
			end
			if (idp_type == 'FEDERATED')
				event_array.push('Federated')
			end
		end
		event.set('[event][payloadData][event_type_filter]', event_array)
	    "
	}

	# Take log time as the timestamp.
	date {
		match => [ "logtime" , "yyyy-MM-dd HH:mm:ss,SSS" ]
		target => "@timestamp"
	}

	# Session specific.
	if [eventType] == "session" {

		# User agent filter to transform the userAgent string into seperated fields.
		useragent {
			ecs_compatibility => disabled
			source => "[event][payloadData][userAgent]"
			target => "userAgentDetails"
		}

		date {
			match => [ "[event][payloadData][startTimestamp]" , "UNIX_MS" ]
			target => "startTime"
		}

		date {
			match => [ "[event][payloadData][terminationTimestamp]" , "UNIX_MS" ]
			target => "endTime"
		}

	} else if [eventType] == "auth" {

		# Geo ip filter to transform the IP address to location.
		geoip {
			ecs_compatibility => disabled
			source => "[event][payloadData][remoteIp]"
		}

		# Geo IP failure to lookup or local address.
		if "_geoip_lookup_failure" in [tags] {
			mutate {
				add_field => { "[geoip][country_name]" => "N/A" }
			}
		}
		
	}

  }
}
output {
    if [fields][document_type] == "project_apim" {
        if [apimMetrics] == " apim:response" {
            elasticsearch {
                hosts => ["http://10.2.22.171:9200"]
                index => "apim_event_response"
                user => "elastic"
                password => "${LOGSTASH_INTERNAL_PASSWORD}"
                ssl_certificate_verification => false
            }
        } else if [apimMetrics] == " apim:faulty" {
            elasticsearch {
                hosts => ["http://10.2.22.171:9200"]
                index => "apim_event_faulty"
                user => "elastic"
                password => "${LOGSTASH_INTERNAL_PASSWORD}"
                ssl_certificate_verification => false
            }
        }

    }else if [fields][document_type] == "project_is_1" {
  	if [eventType] == "auth" {
		elasticsearch {
			hosts => ["http://10.2.22.171:9200"]
            user => "elastic"
            password => "${LOGSTASH_INTERNAL_PASSWORD}"
			index => "wso2-iam-auth-raw"
			document_id => "%{[event][payloadData][eventId]}"
		}
	} else if [eventType] == "session" {
		elasticsearch {
			hosts => ["http://10.2.22.171:9200"]
            user => "elastic"
            password => "${LOGSTASH_INTERNAL_PASSWORD}"
			index => "wso2-iam-session-raw"
			document_id => "%{[event][payloadData][sessionId]}"
		}
		elasticsearch {
			hosts => ["http://10.2.22.171:9200"]
            user => "elastic"
            password => "${LOGSTASH_INTERNAL_PASSWORD}"
			index => "wso2-iam-session-time-series"
		}
	}
  }
}

